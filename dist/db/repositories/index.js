"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseRepository = void 0;
const tslib_1 = require("tslib");
const moment_1 = tslib_1.__importDefault(require("moment"));
const util_methods_1 = require("./util-methods");
class BaseRepository {
    constructor(tableName, pg) {
        this.tableName = tableName;
        this.pg = pg;
    }
    async count(filter, opts = { limit: 10, page: 1, orderType: "DESC" }) {
        let params = this.getFilter(filter, 1);
        params.where = params.where.length ? `WHERE ${params.where} ` : "";
        let values = params.values.length ? params.values : undefined;
        const skip = opts.limit > 0 && opts.page > 0
            ? ` OFFSET ${(1 * opts.page - 1) * opts.limit} `
            : "";
        const limit = opts.page > 0 ? ` LIMIT ${opts.limit} ` : "";
        const limitOffset = skip + limit;
        const query = `SELECT COUNT(*)::int FROM "${this.tableName}" ${params.where} ${limitOffset}`;
        const result = await this.pg.query(query, values);
        return (result.rows[0].count || 0);
    }
    /* success */
    async create(data) {
        const params = util_methods_1.DBUtilMethods.insertParams(data);
        const query = `
        INSERT INTO "${this.tableName}"
        (${params.fields.join(",")})
        VALUES
        (${params.variables.join(",")})
        RETURNING *;
      `;
        // console.log("insert query: ",query);
        // console.log("insert values: ",params.values);
        const result = await this.pg.query(query, params.values);
        return util_methods_1.DBUtilMethods.objToCamel(result.rows[0]);
    }
    /* success */
    async updateById(id, data, fields = []) {
        const params = util_methods_1.DBUtilMethods.updateParams(data);
        const query = `
      UPDATE "${this.tableName}"
      SET ${params.fields.join(", ")}
      WHERE id = ${util_methods_1.DBUtilMethods.prepareValue(id)} AND is_deleted = false
      RETURNING *;`;
        console.log(query);
        const result = await this.pg.query(query, params.values);
        if (result.rowCount === 0)
            throw Error("not found");
        return util_methods_1.DBUtilMethods.objToCamel(result.rows[0]);
    }
    async update(filter, data, fields) {
        const params = util_methods_1.DBUtilMethods.updateParams(data);
        let filterParams = this.getFilter(filter, params.index);
        params.values.concat(filterParams.values);
        filterParams.where = filterParams.where.length
            ? `WHERE ${filterParams.where} `
            : "";
        const query = `
      UPDATE "${this.tableName}"
      SET ${params.fields.join(",")}
      ${filterParams.where}
      RETURNING * ;
    `;
        const res = await this.pg.query(query, params.values);
        return util_methods_1.DBUtilMethods.objToCamel(res.rows[0]);
    }
    /* success */
    async hardDelete(filter) {
        let params = this.getFilter(filter, 1);
        if (params.where.length) {
            params.where = `WHERE ${params.where}`;
        }
        else {
            throw Error(` DELETE qilayotganda filter bo'lishi kerak`);
        }
        const query = ` DELETE FROM "${this.tableName}" ${params.where} ;`;
        console.log(`---------------------------------------  HARD DELETE QUERY  < ${(0, moment_1.default)().format("DD.MM.YYYY HH:mm:ss")} >  ---------------------------------------`);
        await this.pg.query(query, params.values);
    }
    async markDeleteById(id, userId) {
        let values = [id];
        let deletedBy = "";
        if (userId) {
            values.push(userId);
            deletedBy = ", deleted_by = $2";
        }
        const query = `
      UPDATE "${this.tableName}"
      SET
        is_deleted = TRUE,
        deleted_at = extract(epoch from now())::bigint ${deletedBy}
      WHERE id = $1 AND is_deleted = FALSE;
    `;
        await this.pg.query(query, values);
    }
    async getById(id, fields = []) {
        const query = `
      SELECT
        ${fields.length
            ? fields
                .map((f) => util_methods_1.DBUtilMethods.stringToSnake(f.toString()))
                .join(",")
            : "*"}
      FROM "${this.tableName}"
      WHERE id = $1 AND is_deleted = FALSE;
    `;
        const result = await this.pg.query(query, [id]);
        return util_methods_1.DBUtilMethods.objToCamel(result.rows[0]);
    }
    async findOne(filter, fields = []) {
        let params = this.getFilter(filter, 1);
        params.where = params.where.length ? `WHERE ${params.where} ` : "";
        let values = params.values.length ? params.values : undefined;
        const query = `
      SELECT
      ${fields.length
            ? fields
                .map((f) => util_methods_1.DBUtilMethods.stringToSnake(f.toString()))
                .join(",")
            : "*"}
      FROM "${this.tableName}"
      ${params.where}
    `;
        const res = await this.pg.query(query, values);
        return util_methods_1.DBUtilMethods.objToCamel(res.rows[0]);
    }
    async paging(filter, fields, opts = { limit: 10, page: 1, orderType: "DESC" }) {
        let params = this.getFilter(filter, 1);
        opts.orderType = opts.orderType ? opts.orderType : "DESC";
        const orderBy = opts.orderBy && opts.orderBy.toString()
            ? ` ORDER BY ${opts.orderBy.toString()} ${opts.orderType}`
            : "";
        params.where = params.where.length ? `WHERE ${params.where}` : "";
        let values = params.values.length ? params.values : undefined;
        const skip = opts.limit > 0 && opts.page > 0
            ? ` OFFSET ${(1 * opts.page - 1) * opts.limit} `
            : "";
        const limit = opts.page > 0 ? ` LIMIT ${opts.limit} ` : "";
        const limitOffset = skip + limit;
        const query = `
      SELECT ${fields
            .map((f) => util_methods_1.DBUtilMethods.stringToSnake(f.toString()))
            .join(",")}
      FROM "${this.tableName}"
      ${params.where}
      ${orderBy}
      ${limitOffset}
    `;
        const result = await this.pg.query(query, values);
        return util_methods_1.DBUtilMethods.objListToCamel(result.rows);
    }
    getOrAndFilter(filters, index, alias = "", operator = "AND") {
        let where = "";
        alias = alias ? alias + "." : "";
        if (!filters)
            return undefined;
        for (const filter of filters) {
            where += this.getFilter(filter, index, alias, operator, false);
        }
        where = where.trim().slice(0, -4);
        return where;
    }
    getFilter(filter, index, alias = "", operator = "AND", trimOperator = true) {
        const values = [];
        let where = "";
        alias = alias ? alias + "." : "";
        const filterKeys = Object.keys(filter).filter((key) => filter[key] !== undefined);
        for (const [, key] of filterKeys.entries()) {
            if (filter[key] === undefined)
                continue;
            let data = filter[key];
            if (filter[key] && filter[key]?.hasOwnProperty("$regex")) {
                values.push(util_methods_1.DBUtilMethods.prepareValue(data.$regex, false));
                where += `${alias}${util_methods_1.DBUtilMethods.stringToSnake(key)} ILIKE '%$${index}%' ${operator} `;
                index++;
                continue;
            }
            else if (filter[key] && filter[key]?.hasOwnProperty("$lt")) {
                values.push(util_methods_1.DBUtilMethods.prepareValue(data.$lt));
                where += ` ${alias}${util_methods_1.DBUtilMethods.stringToSnake(key)} < $${index} ${operator} `;
                index++;
                continue;
            }
            else if (filter[key] && filter[key].hasOwnProperty("$lte")) {
                values.push(util_methods_1.DBUtilMethods.prepareValue(data.$lte));
                where += ` ${alias}${util_methods_1.DBUtilMethods.stringToSnake(key)} <= $${index} ${operator} `;
                index++;
                continue;
            }
            else if (filter[key] && filter[key].hasOwnProperty("$gt")) {
                values.push(util_methods_1.DBUtilMethods.prepareValue(data.$gt));
                where += ` ${alias}${util_methods_1.DBUtilMethods.stringToSnake(key)} > $${index} ${operator} `;
                index++;
                continue;
            }
            else if (filter[key] && filter[key].hasOwnProperty("$gte")) {
                values.push(util_methods_1.DBUtilMethods.prepareValue(data.$gte));
                where += ` ${alias}${util_methods_1.DBUtilMethods.stringToSnake(key)} >= $${index} ${operator} `;
                index++;
                continue;
            }
            else if (filter[key] && filter[key].hasOwnProperty("$eq")) {
                values.push(util_methods_1.DBUtilMethods.prepareValue(data.$eq));
                where += ` ${alias}${util_methods_1.DBUtilMethods.stringToSnake(key)} = $${index} ${operator} `;
                index++;
                continue;
            }
            else if (filter[key] && filter[key].hasOwnProperty("$ne")) {
                values.push(util_methods_1.DBUtilMethods.prepareValue(data.$ne));
                where += ` ${alias}${util_methods_1.DBUtilMethods.stringToSnake(key)} <> $${index} ${operator} `;
                index++;
                continue;
            }
            else if (filter[key] && filter[key].hasOwnProperty("$notIn")) {
                let notIn = filter[key];
                if (notIn["$notIn"].length > 0) {
                    where += `${alias}${util_methods_1.DBUtilMethods.stringToSnake(key)} NOT IN (${notIn["$notIn"]
                        .reduce((res, val) => `${res} ${util_methods_1.DBUtilMethods.prepareValue(val)},`, "")
                        .slice(0, -1)}) ${operator} `;
                }
                continue;
            }
            else if (key === "$and") {
                if (!this.getOrAndFilter(filter["$and"], index, alias, "AND"))
                    return { index, where, values };
                where +=
                    "(" +
                        this.getOrAndFilter(filter["$and"], index, alias, "AND") +
                        `) ${operator}`;
                continue;
            }
            else if (key === "$or") {
                if (!this.getOrAndFilter(filter["$or"], index, alias, "OR"))
                    return { index, where, values };
                where +=
                    "(" +
                        this.getOrAndFilter(filter["$or"], index, alias, "OR") +
                        `) ${operator}`;
                continue;
            }
            else
                where += ` ${alias}${util_methods_1.DBUtilMethods.stringToSnake(key)} = ${util_methods_1.DBUtilMethods.prepareValue(filter[key])} ${operator} `;
        }
        if (trimOperator)
            where = where.trim().slice(0, -4);
        return { where, values, index };
    }
}
exports.BaseRepository = BaseRepository;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGIvcmVwb3NpdG9yaWVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSw0REFBNEI7QUFJNUIsaURBQStDO0FBRS9DLE1BQWEsY0FBYztJQUN6QixZQUNxQixTQUFpQixFQUNqQixFQUE4QjtRQUQ5QixjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQ2pCLE9BQUUsR0FBRixFQUFFLENBQTRCO0lBQ2hELENBQUM7SUFFSixLQUFLLENBQUMsS0FBSyxDQUNULE1BQXFCLEVBQ3JCLE9BQXlCLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUU7UUFFbEUsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFdkMsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNuRSxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBRTlELE1BQU0sSUFBSSxHQUNSLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQztZQUM3QixDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUc7WUFDaEQsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNULE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzNELE1BQU0sV0FBVyxHQUFHLElBQUksR0FBRyxLQUFLLENBQUM7UUFFakMsTUFBTSxLQUFLLEdBQUcsOEJBQThCLElBQUksQ0FBQyxTQUFTLEtBQUssTUFBTSxDQUFDLEtBQUssSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUU3RixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNsRCxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFXLENBQUM7SUFDL0MsQ0FBQztJQUVELGFBQWE7SUFDYixLQUFLLENBQUMsTUFBTSxDQUFDLElBQWdCO1FBQzNCLE1BQU0sTUFBTSxHQUFHLDRCQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhELE1BQU0sS0FBSyxHQUFHO3VCQUNLLElBQUksQ0FBQyxTQUFTO1dBQzFCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQzs7V0FFdkIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDOztPQUU5QixDQUFDO1FBQ0osdUNBQXVDO1FBQ3ZDLGdEQUFnRDtRQUVoRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekQsT0FBTyw0QkFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELGFBQWE7SUFDYixLQUFLLENBQUMsVUFBVSxDQUNkLEVBQVUsRUFDVixJQUFnQixFQUNoQixTQUFzQixFQUFFO1FBRXhCLE1BQU0sTUFBTSxHQUFHLDRCQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhELE1BQU0sS0FBSyxHQUFHO2dCQUNGLElBQUksQ0FBQyxTQUFTO1lBQ2xCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzttQkFDakIsNEJBQWEsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO21CQUM5QixDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbkIsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXpELElBQUksTUFBTSxDQUFDLFFBQVEsS0FBSyxDQUFDO1lBQUUsTUFBTSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDcEQsT0FBTyw0QkFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFNLENBQ1YsTUFBcUIsRUFDckIsSUFBZ0IsRUFDaEIsTUFBb0I7UUFFcEIsTUFBTSxNQUFNLEdBQUcsNEJBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXhELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUxQyxZQUFZLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTTtZQUM1QyxDQUFDLENBQUMsU0FBUyxZQUFZLENBQUMsS0FBSyxHQUFHO1lBQ2hDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFUCxNQUFNLEtBQUssR0FBRztnQkFDRixJQUFJLENBQUMsU0FBUztZQUNsQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDM0IsWUFBWSxDQUFDLEtBQUs7O0tBRXJCLENBQUM7UUFFRixNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQsT0FBTyw0QkFBYSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELGFBQWE7SUFDYixLQUFLLENBQUMsVUFBVSxDQUFDLE1BQXFCO1FBQ3BDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXZDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN4QixNQUFNLENBQUMsS0FBSyxHQUFHLFNBQVMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3pDLENBQUM7YUFBTSxDQUFDO1lBQ04sTUFBTSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztRQUM1RCxDQUFDO1FBRUQsTUFBTSxLQUFLLEdBQUcsaUJBQWlCLElBQUksQ0FBQyxTQUFTLEtBQUssTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDO1FBRW5FLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUVBQWlFLElBQUEsZ0JBQU0sR0FBRSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1FBRWxLLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFVLEVBQUUsTUFBZTtRQUM5QyxJQUFJLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQ1gsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNwQixTQUFTLEdBQUcsbUJBQW1CLENBQUM7UUFDbEMsQ0FBQztRQUVELE1BQU0sS0FBSyxHQUFHO2dCQUNGLElBQUksQ0FBQyxTQUFTOzs7eURBRzJCLFNBQVM7O0tBRTdELENBQUM7UUFFRixNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFVLEVBQUUsU0FBc0IsRUFBRTtRQUNoRCxNQUFNLEtBQUssR0FBRzs7VUFHUixNQUFNLENBQUMsTUFBTTtZQUNYLENBQUMsQ0FBQyxNQUFNO2lCQUNILEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsNEJBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7aUJBQ3JELElBQUksQ0FBQyxHQUFHLENBQUM7WUFDZCxDQUFDLENBQUMsR0FDTjtjQUNNLElBQUksQ0FBQyxTQUFTOztLQUV2QixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sNEJBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQXFCLEVBQUUsU0FBc0IsRUFBRTtRQUMzRCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV2QyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ25FLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFFOUQsTUFBTSxLQUFLLEdBQUc7O1FBR1YsTUFBTSxDQUFDLE1BQU07WUFDWCxDQUFDLENBQUMsTUFBTTtpQkFDSCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLDRCQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2lCQUNyRCxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ2QsQ0FBQyxDQUFDLEdBQ047Y0FDUSxJQUFJLENBQUMsU0FBUztRQUNwQixNQUFNLENBQUMsS0FBSztLQUNmLENBQUM7UUFFRixNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMvQyxPQUFPLDRCQUFhLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU0sQ0FDVixNQUFxQixFQUNyQixNQUFtQixFQUNuQixPQUF5QixFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFO1FBRWxFLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXZDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQzFELE1BQU0sT0FBTyxHQUNYLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDckMsQ0FBQyxDQUFDLGFBQWEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQzFELENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFVCxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2xFLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFFOUQsTUFBTSxJQUFJLEdBQ1IsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNoRCxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ1QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDM0QsTUFBTSxXQUFXLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUVqQyxNQUFNLEtBQUssR0FBRztlQUNILE1BQU07YUFDWixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLDRCQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2FBQ3JELElBQUksQ0FBQyxHQUFHLENBQUM7Y0FDSixJQUFJLENBQUMsU0FBUztRQUNwQixNQUFNLENBQUMsS0FBSztRQUNaLE9BQU87UUFDUCxXQUFXO0tBQ2QsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELE9BQU8sNEJBQWEsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTyxjQUFjLENBQ3BCLE9BQW9DLEVBQ3BDLEtBQWEsRUFDYixLQUFLLEdBQUcsRUFBRSxFQUNWLFdBQXlCLEtBQUs7UUFFOUIsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2YsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPO1lBQUUsT0FBTyxTQUFTLENBQUM7UUFFL0IsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUM3QixLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakUsQ0FBQztRQUVELEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxDLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVPLFNBQVMsQ0FDZixNQUFxQixFQUNyQixLQUFhLEVBQ2IsS0FBSyxHQUFHLEVBQUUsRUFDVixXQUF5QixLQUFLLEVBQzlCLFlBQVksR0FBRyxJQUFJO1FBRW5CLE1BQU0sTUFBTSxHQUFVLEVBQUUsQ0FBQztRQUN6QixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDZixLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDakMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQzNDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxDQUNuQyxDQUFDO1FBRUYsS0FBSyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztZQUMzQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTO2dCQUFFLFNBQVM7WUFFeEMsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRXZCLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztnQkFDekQsTUFBTSxDQUFDLElBQUksQ0FBQyw0QkFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzVELEtBQUssSUFBSSxHQUFHLEtBQUssR0FBRyw0QkFBYSxDQUFDLGFBQWEsQ0FDN0MsR0FBRyxDQUNKLGFBQWEsS0FBSyxNQUFNLFFBQVEsR0FBRyxDQUFDO2dCQUNyQyxLQUFLLEVBQUUsQ0FBQztnQkFDUixTQUFTO1lBQ1gsQ0FBQztpQkFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQzdELE1BQU0sQ0FBQyxJQUFJLENBQUMsNEJBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELEtBQUssSUFBSSxJQUFJLEtBQUssR0FBRyw0QkFBYSxDQUFDLGFBQWEsQ0FDOUMsR0FBRyxDQUNKLE9BQU8sS0FBSyxJQUFJLFFBQVEsR0FBRyxDQUFDO2dCQUM3QixLQUFLLEVBQUUsQ0FBQztnQkFDUixTQUFTO1lBQ1gsQ0FBQztpQkFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7Z0JBQzdELE1BQU0sQ0FBQyxJQUFJLENBQUMsNEJBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ25ELEtBQUssSUFBSSxJQUFJLEtBQUssR0FBRyw0QkFBYSxDQUFDLGFBQWEsQ0FDOUMsR0FBRyxDQUNKLFFBQVEsS0FBSyxJQUFJLFFBQVEsR0FBRyxDQUFDO2dCQUM5QixLQUFLLEVBQUUsQ0FBQztnQkFDUixTQUFTO1lBQ1gsQ0FBQztpQkFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQzVELE1BQU0sQ0FBQyxJQUFJLENBQUMsNEJBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELEtBQUssSUFBSSxJQUFJLEtBQUssR0FBRyw0QkFBYSxDQUFDLGFBQWEsQ0FDOUMsR0FBRyxDQUNKLE9BQU8sS0FBSyxJQUFJLFFBQVEsR0FBRyxDQUFDO2dCQUM3QixLQUFLLEVBQUUsQ0FBQztnQkFDUixTQUFTO1lBQ1gsQ0FBQztpQkFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7Z0JBQzdELE1BQU0sQ0FBQyxJQUFJLENBQUMsNEJBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ25ELEtBQUssSUFBSSxJQUFJLEtBQUssR0FBRyw0QkFBYSxDQUFDLGFBQWEsQ0FDOUMsR0FBRyxDQUNKLFFBQVEsS0FBSyxJQUFJLFFBQVEsR0FBRyxDQUFDO2dCQUM5QixLQUFLLEVBQUUsQ0FBQztnQkFDUixTQUFTO1lBQ1gsQ0FBQztpQkFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQzVELE1BQU0sQ0FBQyxJQUFJLENBQUMsNEJBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELEtBQUssSUFBSSxJQUFJLEtBQUssR0FBRyw0QkFBYSxDQUFDLGFBQWEsQ0FDOUMsR0FBRyxDQUNKLE9BQU8sS0FBSyxJQUFJLFFBQVEsR0FBRyxDQUFDO2dCQUM3QixLQUFLLEVBQUUsQ0FBQztnQkFDUixTQUFTO1lBQ1gsQ0FBQztpQkFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQzVELE1BQU0sQ0FBQyxJQUFJLENBQUMsNEJBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELEtBQUssSUFBSSxJQUFJLEtBQUssR0FBRyw0QkFBYSxDQUFDLGFBQWEsQ0FDOUMsR0FBRyxDQUNKLFFBQVEsS0FBSyxJQUFJLFFBQVEsR0FBRyxDQUFDO2dCQUM5QixLQUFLLEVBQUUsQ0FBQztnQkFDUixTQUFTO1lBQ1gsQ0FBQztpQkFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7Z0JBQy9ELElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQVEsQ0FBQztnQkFDL0IsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO29CQUMvQixLQUFLLElBQUksR0FBRyxLQUFLLEdBQUcsNEJBQWEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFlBQVksS0FBSyxDQUNuRSxRQUFRLENBQ1Q7eUJBQ0UsTUFBTSxDQUNMLENBQUMsR0FBUSxFQUFFLEdBQVEsRUFBRSxFQUFFLENBQ3JCLEdBQUcsR0FBRyxJQUFJLDRCQUFhLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQzlDLEVBQUUsQ0FDSDt5QkFDQSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxHQUFHLENBQUM7Z0JBQ2xDLENBQUM7Z0JBQ0QsU0FBUztZQUNYLENBQUM7aUJBQU0sSUFBSSxHQUFHLEtBQUssTUFBTSxFQUFFLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztvQkFDM0QsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUM7Z0JBQ2xDLEtBQUs7b0JBQ0gsR0FBRzt3QkFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQzt3QkFDeEQsS0FBSyxRQUFRLEVBQUUsQ0FBQztnQkFDbEIsU0FBUztZQUNYLENBQUM7aUJBQU0sSUFBSSxHQUFHLEtBQUssS0FBSyxFQUFFLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQztvQkFDekQsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUM7Z0JBQ2xDLEtBQUs7b0JBQ0gsR0FBRzt3QkFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQzt3QkFDdEQsS0FBSyxRQUFRLEVBQUUsQ0FBQztnQkFDbEIsU0FBUztZQUNYLENBQUM7O2dCQUNDLEtBQUssSUFBSSxJQUFJLEtBQUssR0FBRyw0QkFBYSxDQUFDLGFBQWEsQ0FDOUMsR0FBRyxDQUNKLE1BQU0sNEJBQWEsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUM7UUFDbEUsQ0FBQztRQUVELElBQUksWUFBWTtZQUFFLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXBELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ2xDLENBQUM7Q0FDRjtBQTdVRCx3Q0E2VUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9tZW50IGZyb20gXCJtb21lbnRcIjtcclxuaW1wb3J0IHsgUG9vbENsaWVudCwgUG9vbCwgQ2xpZW50IH0gZnJvbSBcInBnXCI7XHJcbmltcG9ydCB7IElCYXNlUmVwb3NpdG9yeSB9IGZyb20gXCIuL2ludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBGaWx0ZXJUeXBlLCBJUXVlcnlPcHRpb25zIH0gZnJvbSBcIi4vdXRpbC10eXBlc1wiO1xyXG5pbXBvcnQgeyBEQlV0aWxNZXRob2RzIH0gZnJvbSBcIi4vdXRpbC1tZXRob2RzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQmFzZVJlcG9zaXRvcnk8VD4gaW1wbGVtZW50cyBJQmFzZVJlcG9zaXRvcnk8VD4ge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHRhYmxlTmFtZTogc3RyaW5nLFxyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHBnOiBQb29sIHwgUG9vbENsaWVudCB8IENsaWVudFxyXG4gICkge31cclxuXHJcbiAgYXN5bmMgY291bnQoXHJcbiAgICBmaWx0ZXI6IEZpbHRlclR5cGU8VD4sXHJcbiAgICBvcHRzOiBJUXVlcnlPcHRpb25zPFQ+ID0geyBsaW1pdDogMTAsIHBhZ2U6IDEsIG9yZGVyVHlwZTogXCJERVNDXCIgfVxyXG4gICk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICBsZXQgcGFyYW1zID0gdGhpcy5nZXRGaWx0ZXIoZmlsdGVyLCAxKTtcclxuXHJcbiAgICBwYXJhbXMud2hlcmUgPSBwYXJhbXMud2hlcmUubGVuZ3RoID8gYFdIRVJFICR7cGFyYW1zLndoZXJlfSBgIDogXCJcIjtcclxuICAgIGxldCB2YWx1ZXMgPSBwYXJhbXMudmFsdWVzLmxlbmd0aCA/IHBhcmFtcy52YWx1ZXMgOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgY29uc3Qgc2tpcCA9XHJcbiAgICAgIG9wdHMubGltaXQgPiAwICYmIG9wdHMucGFnZSA+IDBcclxuICAgICAgICA/IGAgT0ZGU0VUICR7KDEgKiBvcHRzLnBhZ2UgLSAxKSAqIG9wdHMubGltaXR9IGBcclxuICAgICAgICA6IFwiXCI7XHJcbiAgICBjb25zdCBsaW1pdCA9IG9wdHMucGFnZSA+IDAgPyBgIExJTUlUICR7b3B0cy5saW1pdH0gYCA6IFwiXCI7XHJcbiAgICBjb25zdCBsaW1pdE9mZnNldCA9IHNraXAgKyBsaW1pdDtcclxuXHJcbiAgICBjb25zdCBxdWVyeSA9IGBTRUxFQ1QgQ09VTlQoKik6OmludCBGUk9NIFwiJHt0aGlzLnRhYmxlTmFtZX1cIiAke3BhcmFtcy53aGVyZX0gJHtsaW1pdE9mZnNldH1gO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucGcucXVlcnkocXVlcnksIHZhbHVlcyk7XHJcbiAgICByZXR1cm4gKHJlc3VsdC5yb3dzWzBdLmNvdW50IHx8IDApIGFzIG51bWJlcjtcclxuICB9XHJcblxyXG4gIC8qIHN1Y2Nlc3MgKi9cclxuICBhc3luYyBjcmVhdGUoZGF0YTogUGFydGlhbDxUPik6IFByb21pc2U8VD4ge1xyXG4gICAgY29uc3QgcGFyYW1zID0gREJVdGlsTWV0aG9kcy5pbnNlcnRQYXJhbXMoZGF0YSk7XHJcblxyXG4gICAgY29uc3QgcXVlcnkgPSBgXHJcbiAgICAgICAgSU5TRVJUIElOVE8gXCIke3RoaXMudGFibGVOYW1lfVwiXHJcbiAgICAgICAgKCR7cGFyYW1zLmZpZWxkcy5qb2luKFwiLFwiKX0pXHJcbiAgICAgICAgVkFMVUVTXHJcbiAgICAgICAgKCR7cGFyYW1zLnZhcmlhYmxlcy5qb2luKFwiLFwiKX0pXHJcbiAgICAgICAgUkVUVVJOSU5HICo7XHJcbiAgICAgIGA7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcImluc2VydCBxdWVyeTogXCIscXVlcnkpO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJpbnNlcnQgdmFsdWVzOiBcIixwYXJhbXMudmFsdWVzKTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBnLnF1ZXJ5KHF1ZXJ5LCBwYXJhbXMudmFsdWVzKTtcclxuICAgIHJldHVybiBEQlV0aWxNZXRob2RzLm9ialRvQ2FtZWwocmVzdWx0LnJvd3NbMF0pO1xyXG4gIH1cclxuXHJcbiAgLyogc3VjY2VzcyAqL1xyXG4gIGFzeW5jIHVwZGF0ZUJ5SWQoXHJcbiAgICBpZDogc3RyaW5nLFxyXG4gICAgZGF0YTogUGFydGlhbDxUPixcclxuICAgIGZpZWxkczogKGtleW9mIFQpW10gPSBbXVxyXG4gICk6IFByb21pc2U8VD4ge1xyXG4gICAgY29uc3QgcGFyYW1zID0gREJVdGlsTWV0aG9kcy51cGRhdGVQYXJhbXMoZGF0YSk7XHJcblxyXG4gICAgY29uc3QgcXVlcnkgPSBgXHJcbiAgICAgIFVQREFURSBcIiR7dGhpcy50YWJsZU5hbWV9XCJcclxuICAgICAgU0VUICR7cGFyYW1zLmZpZWxkcy5qb2luKFwiLCBcIil9XHJcbiAgICAgIFdIRVJFIGlkID0gJHtEQlV0aWxNZXRob2RzLnByZXBhcmVWYWx1ZShpZCl9IEFORCBpc19kZWxldGVkID0gZmFsc2VcclxuICAgICAgUkVUVVJOSU5HICo7YDtcclxuICAgIGNvbnNvbGUubG9nKHF1ZXJ5KTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBnLnF1ZXJ5KHF1ZXJ5LCBwYXJhbXMudmFsdWVzKTtcclxuXHJcbiAgICBpZiAocmVzdWx0LnJvd0NvdW50ID09PSAwKSB0aHJvdyBFcnJvcihcIm5vdCBmb3VuZFwiKTtcclxuICAgIHJldHVybiBEQlV0aWxNZXRob2RzLm9ialRvQ2FtZWwocmVzdWx0LnJvd3NbMF0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgdXBkYXRlKFxyXG4gICAgZmlsdGVyOiBGaWx0ZXJUeXBlPFQ+LFxyXG4gICAgZGF0YTogUGFydGlhbDxUPixcclxuICAgIGZpZWxkcz86IChrZXlvZiBUKVtdXHJcbiAgKTogUHJvbWlzZTxUPiB7XHJcbiAgICBjb25zdCBwYXJhbXMgPSBEQlV0aWxNZXRob2RzLnVwZGF0ZVBhcmFtcyhkYXRhKTtcclxuICAgIGxldCBmaWx0ZXJQYXJhbXMgPSB0aGlzLmdldEZpbHRlcihmaWx0ZXIsIHBhcmFtcy5pbmRleCk7XHJcblxyXG4gICAgcGFyYW1zLnZhbHVlcy5jb25jYXQoZmlsdGVyUGFyYW1zLnZhbHVlcyk7XHJcblxyXG4gICAgZmlsdGVyUGFyYW1zLndoZXJlID0gZmlsdGVyUGFyYW1zLndoZXJlLmxlbmd0aFxyXG4gICAgICA/IGBXSEVSRSAke2ZpbHRlclBhcmFtcy53aGVyZX0gYFxyXG4gICAgICA6IFwiXCI7XHJcblxyXG4gICAgY29uc3QgcXVlcnkgPSBgXHJcbiAgICAgIFVQREFURSBcIiR7dGhpcy50YWJsZU5hbWV9XCJcclxuICAgICAgU0VUICR7cGFyYW1zLmZpZWxkcy5qb2luKFwiLFwiKX1cclxuICAgICAgJHtmaWx0ZXJQYXJhbXMud2hlcmV9XHJcbiAgICAgIFJFVFVSTklORyAqIDtcclxuICAgIGA7XHJcblxyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5wZy5xdWVyeShxdWVyeSwgcGFyYW1zLnZhbHVlcyk7XHJcbiAgICByZXR1cm4gREJVdGlsTWV0aG9kcy5vYmpUb0NhbWVsKHJlcy5yb3dzWzBdKTtcclxuICB9XHJcblxyXG4gIC8qIHN1Y2Nlc3MgKi9cclxuICBhc3luYyBoYXJkRGVsZXRlKGZpbHRlcjogRmlsdGVyVHlwZTxUPik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgbGV0IHBhcmFtcyA9IHRoaXMuZ2V0RmlsdGVyKGZpbHRlciwgMSk7XHJcblxyXG4gICAgaWYgKHBhcmFtcy53aGVyZS5sZW5ndGgpIHtcclxuICAgICAgcGFyYW1zLndoZXJlID0gYFdIRVJFICR7cGFyYW1zLndoZXJlfWA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBFcnJvcihgIERFTEVURSBxaWxheW90Z2FuZGEgZmlsdGVyIGJvJ2xpc2hpIGtlcmFrYCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcXVlcnkgPSBgIERFTEVURSBGUk9NIFwiJHt0aGlzLnRhYmxlTmFtZX1cIiAke3BhcmFtcy53aGVyZX0gO2A7XHJcblxyXG4gICAgY29uc29sZS5sb2coYC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgSEFSRCBERUxFVEUgUVVFUlkgIDwgJHttb21lbnQoKS5mb3JtYXQoXCJERC5NTS5ZWVlZIEhIOm1tOnNzXCIpfSA+ICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1gKTtcclxuXHJcbiAgICBhd2FpdCB0aGlzLnBnLnF1ZXJ5KHF1ZXJ5LCBwYXJhbXMudmFsdWVzKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIG1hcmtEZWxldGVCeUlkKGlkOiBzdHJpbmcsIHVzZXJJZD86IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgbGV0IHZhbHVlcyA9IFtpZF07XHJcbiAgICBsZXQgZGVsZXRlZEJ5ID0gXCJcIjtcclxuICAgIGlmICh1c2VySWQpIHtcclxuICAgICAgdmFsdWVzLnB1c2godXNlcklkKTtcclxuICAgICAgZGVsZXRlZEJ5ID0gXCIsIGRlbGV0ZWRfYnkgPSAkMlwiO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHF1ZXJ5ID0gYFxyXG4gICAgICBVUERBVEUgXCIke3RoaXMudGFibGVOYW1lfVwiXHJcbiAgICAgIFNFVFxyXG4gICAgICAgIGlzX2RlbGV0ZWQgPSBUUlVFLFxyXG4gICAgICAgIGRlbGV0ZWRfYXQgPSBleHRyYWN0KGVwb2NoIGZyb20gbm93KCkpOjpiaWdpbnQgJHtkZWxldGVkQnl9XHJcbiAgICAgIFdIRVJFIGlkID0gJDEgQU5EIGlzX2RlbGV0ZWQgPSBGQUxTRTtcclxuICAgIGA7XHJcblxyXG4gICAgYXdhaXQgdGhpcy5wZy5xdWVyeShxdWVyeSwgdmFsdWVzKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldEJ5SWQoaWQ6IHN0cmluZywgZmllbGRzOiAoa2V5b2YgVClbXSA9IFtdKTogUHJvbWlzZTxUPiB7XHJcbiAgICBjb25zdCBxdWVyeSA9IGBcclxuICAgICAgU0VMRUNUXHJcbiAgICAgICAgJHtcclxuICAgICAgICAgIGZpZWxkcy5sZW5ndGhcclxuICAgICAgICAgICAgPyBmaWVsZHNcclxuICAgICAgICAgICAgICAgIC5tYXAoKGYpID0+IERCVXRpbE1ldGhvZHMuc3RyaW5nVG9TbmFrZShmLnRvU3RyaW5nKCkpKVxyXG4gICAgICAgICAgICAgICAgLmpvaW4oXCIsXCIpXHJcbiAgICAgICAgICAgIDogXCIqXCJcclxuICAgICAgICB9XHJcbiAgICAgIEZST00gXCIke3RoaXMudGFibGVOYW1lfVwiXHJcbiAgICAgIFdIRVJFIGlkID0gJDEgQU5EIGlzX2RlbGV0ZWQgPSBGQUxTRTtcclxuICAgIGA7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wZy5xdWVyeShxdWVyeSwgW2lkXSk7XHJcbiAgICByZXR1cm4gREJVdGlsTWV0aG9kcy5vYmpUb0NhbWVsKHJlc3VsdC5yb3dzWzBdKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGZpbmRPbmUoZmlsdGVyOiBGaWx0ZXJUeXBlPFQ+LCBmaWVsZHM6IChrZXlvZiBUKVtdID0gW10pOiBQcm9taXNlPFQ+IHtcclxuICAgIGxldCBwYXJhbXMgPSB0aGlzLmdldEZpbHRlcihmaWx0ZXIsIDEpO1xyXG5cclxuICAgIHBhcmFtcy53aGVyZSA9IHBhcmFtcy53aGVyZS5sZW5ndGggPyBgV0hFUkUgJHtwYXJhbXMud2hlcmV9IGAgOiBcIlwiO1xyXG4gICAgbGV0IHZhbHVlcyA9IHBhcmFtcy52YWx1ZXMubGVuZ3RoID8gcGFyYW1zLnZhbHVlcyA6IHVuZGVmaW5lZDtcclxuXHJcbiAgICBjb25zdCBxdWVyeSA9IGBcclxuICAgICAgU0VMRUNUXHJcbiAgICAgICR7XHJcbiAgICAgICAgZmllbGRzLmxlbmd0aFxyXG4gICAgICAgICAgPyBmaWVsZHNcclxuICAgICAgICAgICAgICAubWFwKChmKSA9PiBEQlV0aWxNZXRob2RzLnN0cmluZ1RvU25ha2UoZi50b1N0cmluZygpKSlcclxuICAgICAgICAgICAgICAuam9pbihcIixcIilcclxuICAgICAgICAgIDogXCIqXCJcclxuICAgICAgfVxyXG4gICAgICBGUk9NIFwiJHt0aGlzLnRhYmxlTmFtZX1cIlxyXG4gICAgICAke3BhcmFtcy53aGVyZX1cclxuICAgIGA7XHJcblxyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5wZy5xdWVyeShxdWVyeSwgdmFsdWVzKTtcclxuICAgIHJldHVybiBEQlV0aWxNZXRob2RzLm9ialRvQ2FtZWwocmVzLnJvd3NbMF0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcGFnaW5nKFxyXG4gICAgZmlsdGVyOiBGaWx0ZXJUeXBlPFQ+LFxyXG4gICAgZmllbGRzOiAoa2V5b2YgVClbXSxcclxuICAgIG9wdHM6IElRdWVyeU9wdGlvbnM8VD4gPSB7IGxpbWl0OiAxMCwgcGFnZTogMSwgb3JkZXJUeXBlOiBcIkRFU0NcIiB9XHJcbiAgKTogUHJvbWlzZTxUW10+IHtcclxuICAgIGxldCBwYXJhbXMgPSB0aGlzLmdldEZpbHRlcihmaWx0ZXIsIDEpO1xyXG5cclxuICAgIG9wdHMub3JkZXJUeXBlID0gb3B0cy5vcmRlclR5cGUgPyBvcHRzLm9yZGVyVHlwZSA6IFwiREVTQ1wiO1xyXG4gICAgY29uc3Qgb3JkZXJCeSA9XHJcbiAgICAgIG9wdHMub3JkZXJCeSAmJiBvcHRzLm9yZGVyQnkudG9TdHJpbmcoKVxyXG4gICAgICAgID8gYCBPUkRFUiBCWSAke29wdHMub3JkZXJCeS50b1N0cmluZygpfSAke29wdHMub3JkZXJUeXBlfWBcclxuICAgICAgICA6IFwiXCI7XHJcblxyXG4gICAgcGFyYW1zLndoZXJlID0gcGFyYW1zLndoZXJlLmxlbmd0aCA/IGBXSEVSRSAke3BhcmFtcy53aGVyZX1gIDogXCJcIjtcclxuICAgIGxldCB2YWx1ZXMgPSBwYXJhbXMudmFsdWVzLmxlbmd0aCA/IHBhcmFtcy52YWx1ZXMgOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgY29uc3Qgc2tpcCA9XHJcbiAgICAgIG9wdHMubGltaXQgPiAwICYmIG9wdHMucGFnZSA+IDBcclxuICAgICAgICA/IGAgT0ZGU0VUICR7KDEgKiBvcHRzLnBhZ2UgLSAxKSAqIG9wdHMubGltaXR9IGBcclxuICAgICAgICA6IFwiXCI7XHJcbiAgICBjb25zdCBsaW1pdCA9IG9wdHMucGFnZSA+IDAgPyBgIExJTUlUICR7b3B0cy5saW1pdH0gYCA6IFwiXCI7XHJcbiAgICBjb25zdCBsaW1pdE9mZnNldCA9IHNraXAgKyBsaW1pdDtcclxuXHJcbiAgICBjb25zdCBxdWVyeSA9IGBcclxuICAgICAgU0VMRUNUICR7ZmllbGRzXHJcbiAgICAgICAgLm1hcCgoZikgPT4gREJVdGlsTWV0aG9kcy5zdHJpbmdUb1NuYWtlKGYudG9TdHJpbmcoKSkpXHJcbiAgICAgICAgLmpvaW4oXCIsXCIpfVxyXG4gICAgICBGUk9NIFwiJHt0aGlzLnRhYmxlTmFtZX1cIlxyXG4gICAgICAke3BhcmFtcy53aGVyZX1cclxuICAgICAgJHtvcmRlckJ5fVxyXG4gICAgICAke2xpbWl0T2Zmc2V0fVxyXG4gICAgYDtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBnLnF1ZXJ5KHF1ZXJ5LCB2YWx1ZXMpO1xyXG4gICAgcmV0dXJuIERCVXRpbE1ldGhvZHMub2JqTGlzdFRvQ2FtZWwocmVzdWx0LnJvd3MpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRPckFuZEZpbHRlcihcclxuICAgIGZpbHRlcnM6IEZpbHRlclR5cGU8VD5bXSB8IHVuZGVmaW5lZCxcclxuICAgIGluZGV4OiBudW1iZXIsXHJcbiAgICBhbGlhcyA9IFwiXCIsXHJcbiAgICBvcGVyYXRvcjogXCJBTkRcIiB8IFwiT1JcIiA9IFwiQU5EXCJcclxuICApIHtcclxuICAgIGxldCB3aGVyZSA9IFwiXCI7XHJcbiAgICBhbGlhcyA9IGFsaWFzID8gYWxpYXMgKyBcIi5cIiA6IFwiXCI7XHJcbiAgICBpZiAoIWZpbHRlcnMpIHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG4gICAgZm9yIChjb25zdCBmaWx0ZXIgb2YgZmlsdGVycykge1xyXG4gICAgICB3aGVyZSArPSB0aGlzLmdldEZpbHRlcihmaWx0ZXIsIGluZGV4LCBhbGlhcywgb3BlcmF0b3IsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICB3aGVyZSA9IHdoZXJlLnRyaW0oKS5zbGljZSgwLCAtNCk7XHJcblxyXG4gICAgcmV0dXJuIHdoZXJlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRGaWx0ZXIoXHJcbiAgICBmaWx0ZXI6IEZpbHRlclR5cGU8VD4sXHJcbiAgICBpbmRleDogbnVtYmVyLFxyXG4gICAgYWxpYXMgPSBcIlwiLFxyXG4gICAgb3BlcmF0b3I6IFwiQU5EXCIgfCBcIk9SXCIgPSBcIkFORFwiLFxyXG4gICAgdHJpbU9wZXJhdG9yID0gdHJ1ZVxyXG4gICkge1xyXG4gICAgY29uc3QgdmFsdWVzOiBhbnlbXSA9IFtdO1xyXG4gICAgbGV0IHdoZXJlID0gXCJcIjtcclxuICAgIGFsaWFzID0gYWxpYXMgPyBhbGlhcyArIFwiLlwiIDogXCJcIjtcclxuICAgIGNvbnN0IGZpbHRlcktleXMgPSBPYmplY3Qua2V5cyhmaWx0ZXIpLmZpbHRlcihcclxuICAgICAgKGtleSkgPT4gZmlsdGVyW2tleV0gIT09IHVuZGVmaW5lZFxyXG4gICAgKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IFssIGtleV0gb2YgZmlsdGVyS2V5cy5lbnRyaWVzKCkpIHtcclxuICAgICAgaWYgKGZpbHRlcltrZXldID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgbGV0IGRhdGEgPSBmaWx0ZXJba2V5XTtcclxuXHJcbiAgICAgIGlmIChmaWx0ZXJba2V5XSAmJiBmaWx0ZXJba2V5XT8uaGFzT3duUHJvcGVydHkoXCIkcmVnZXhcIikpIHtcclxuICAgICAgICB2YWx1ZXMucHVzaChEQlV0aWxNZXRob2RzLnByZXBhcmVWYWx1ZShkYXRhLiRyZWdleCwgZmFsc2UpKTtcclxuICAgICAgICB3aGVyZSArPSBgJHthbGlhc30ke0RCVXRpbE1ldGhvZHMuc3RyaW5nVG9TbmFrZShcclxuICAgICAgICAgIGtleVxyXG4gICAgICAgICl9IElMSUtFICclJCR7aW5kZXh9JScgJHtvcGVyYXRvcn0gYDtcclxuICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9IGVsc2UgaWYgKGZpbHRlcltrZXldICYmIGZpbHRlcltrZXldPy5oYXNPd25Qcm9wZXJ0eShcIiRsdFwiKSkge1xyXG4gICAgICAgIHZhbHVlcy5wdXNoKERCVXRpbE1ldGhvZHMucHJlcGFyZVZhbHVlKGRhdGEuJGx0KSk7XHJcbiAgICAgICAgd2hlcmUgKz0gYCAke2FsaWFzfSR7REJVdGlsTWV0aG9kcy5zdHJpbmdUb1NuYWtlKFxyXG4gICAgICAgICAga2V5XHJcbiAgICAgICAgKX0gPCAkJHtpbmRleH0gJHtvcGVyYXRvcn0gYDtcclxuICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9IGVsc2UgaWYgKGZpbHRlcltrZXldICYmIGZpbHRlcltrZXldLmhhc093blByb3BlcnR5KFwiJGx0ZVwiKSkge1xyXG4gICAgICAgIHZhbHVlcy5wdXNoKERCVXRpbE1ldGhvZHMucHJlcGFyZVZhbHVlKGRhdGEuJGx0ZSkpO1xyXG4gICAgICAgIHdoZXJlICs9IGAgJHthbGlhc30ke0RCVXRpbE1ldGhvZHMuc3RyaW5nVG9TbmFrZShcclxuICAgICAgICAgIGtleVxyXG4gICAgICAgICl9IDw9ICQke2luZGV4fSAke29wZXJhdG9yfSBgO1xyXG4gICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH0gZWxzZSBpZiAoZmlsdGVyW2tleV0gJiYgZmlsdGVyW2tleV0uaGFzT3duUHJvcGVydHkoXCIkZ3RcIikpIHtcclxuICAgICAgICB2YWx1ZXMucHVzaChEQlV0aWxNZXRob2RzLnByZXBhcmVWYWx1ZShkYXRhLiRndCkpO1xyXG4gICAgICAgIHdoZXJlICs9IGAgJHthbGlhc30ke0RCVXRpbE1ldGhvZHMuc3RyaW5nVG9TbmFrZShcclxuICAgICAgICAgIGtleVxyXG4gICAgICAgICl9ID4gJCR7aW5kZXh9ICR7b3BlcmF0b3J9IGA7XHJcbiAgICAgICAgaW5kZXgrKztcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfSBlbHNlIGlmIChmaWx0ZXJba2V5XSAmJiBmaWx0ZXJba2V5XS5oYXNPd25Qcm9wZXJ0eShcIiRndGVcIikpIHtcclxuICAgICAgICB2YWx1ZXMucHVzaChEQlV0aWxNZXRob2RzLnByZXBhcmVWYWx1ZShkYXRhLiRndGUpKTtcclxuICAgICAgICB3aGVyZSArPSBgICR7YWxpYXN9JHtEQlV0aWxNZXRob2RzLnN0cmluZ1RvU25ha2UoXHJcbiAgICAgICAgICBrZXlcclxuICAgICAgICApfSA+PSAkJHtpbmRleH0gJHtvcGVyYXRvcn0gYDtcclxuICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9IGVsc2UgaWYgKGZpbHRlcltrZXldICYmIGZpbHRlcltrZXldLmhhc093blByb3BlcnR5KFwiJGVxXCIpKSB7XHJcbiAgICAgICAgdmFsdWVzLnB1c2goREJVdGlsTWV0aG9kcy5wcmVwYXJlVmFsdWUoZGF0YS4kZXEpKTtcclxuICAgICAgICB3aGVyZSArPSBgICR7YWxpYXN9JHtEQlV0aWxNZXRob2RzLnN0cmluZ1RvU25ha2UoXHJcbiAgICAgICAgICBrZXlcclxuICAgICAgICApfSA9ICQke2luZGV4fSAke29wZXJhdG9yfSBgO1xyXG4gICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH0gZWxzZSBpZiAoZmlsdGVyW2tleV0gJiYgZmlsdGVyW2tleV0uaGFzT3duUHJvcGVydHkoXCIkbmVcIikpIHtcclxuICAgICAgICB2YWx1ZXMucHVzaChEQlV0aWxNZXRob2RzLnByZXBhcmVWYWx1ZShkYXRhLiRuZSkpO1xyXG4gICAgICAgIHdoZXJlICs9IGAgJHthbGlhc30ke0RCVXRpbE1ldGhvZHMuc3RyaW5nVG9TbmFrZShcclxuICAgICAgICAgIGtleVxyXG4gICAgICAgICl9IDw+ICQke2luZGV4fSAke29wZXJhdG9yfSBgO1xyXG4gICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH0gZWxzZSBpZiAoZmlsdGVyW2tleV0gJiYgZmlsdGVyW2tleV0uaGFzT3duUHJvcGVydHkoXCIkbm90SW5cIikpIHtcclxuICAgICAgICBsZXQgbm90SW4gPSBmaWx0ZXJba2V5XSBhcyBhbnk7XHJcbiAgICAgICAgaWYgKG5vdEluW1wiJG5vdEluXCJdLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIHdoZXJlICs9IGAke2FsaWFzfSR7REJVdGlsTWV0aG9kcy5zdHJpbmdUb1NuYWtlKGtleSl9IE5PVCBJTiAoJHtub3RJbltcclxuICAgICAgICAgICAgXCIkbm90SW5cIlxyXG4gICAgICAgICAgXVxyXG4gICAgICAgICAgICAucmVkdWNlKFxyXG4gICAgICAgICAgICAgIChyZXM6IGFueSwgdmFsOiBhbnkpID0+XHJcbiAgICAgICAgICAgICAgICBgJHtyZXN9ICR7REJVdGlsTWV0aG9kcy5wcmVwYXJlVmFsdWUodmFsKX0sYCxcclxuICAgICAgICAgICAgICBcIlwiXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLnNsaWNlKDAsIC0xKX0pICR7b3BlcmF0b3J9IGA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCIkYW5kXCIpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZ2V0T3JBbmRGaWx0ZXIoZmlsdGVyW1wiJGFuZFwiXSwgaW5kZXgsIGFsaWFzLCBcIkFORFwiKSlcclxuICAgICAgICAgIHJldHVybiB7IGluZGV4LCB3aGVyZSwgdmFsdWVzIH07XHJcbiAgICAgICAgd2hlcmUgKz1cclxuICAgICAgICAgIFwiKFwiICtcclxuICAgICAgICAgIHRoaXMuZ2V0T3JBbmRGaWx0ZXIoZmlsdGVyW1wiJGFuZFwiXSwgaW5kZXgsIGFsaWFzLCBcIkFORFwiKSArXHJcbiAgICAgICAgICBgKSAke29wZXJhdG9yfWA7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcIiRvclwiKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmdldE9yQW5kRmlsdGVyKGZpbHRlcltcIiRvclwiXSwgaW5kZXgsIGFsaWFzLCBcIk9SXCIpKVxyXG4gICAgICAgICAgcmV0dXJuIHsgaW5kZXgsIHdoZXJlLCB2YWx1ZXMgfTtcclxuICAgICAgICB3aGVyZSArPVxyXG4gICAgICAgICAgXCIoXCIgK1xyXG4gICAgICAgICAgdGhpcy5nZXRPckFuZEZpbHRlcihmaWx0ZXJbXCIkb3JcIl0sIGluZGV4LCBhbGlhcywgXCJPUlwiKSArXHJcbiAgICAgICAgICBgKSAke29wZXJhdG9yfWA7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH0gZWxzZVxyXG4gICAgICAgIHdoZXJlICs9IGAgJHthbGlhc30ke0RCVXRpbE1ldGhvZHMuc3RyaW5nVG9TbmFrZShcclxuICAgICAgICAgIGtleVxyXG4gICAgICAgICl9ID0gJHtEQlV0aWxNZXRob2RzLnByZXBhcmVWYWx1ZShmaWx0ZXJba2V5XSl9ICR7b3BlcmF0b3J9IGA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRyaW1PcGVyYXRvcikgd2hlcmUgPSB3aGVyZS50cmltKCkuc2xpY2UoMCwgLTQpO1xyXG5cclxuICAgIHJldHVybiB7IHdoZXJlLCB2YWx1ZXMsIGluZGV4IH07XHJcbiAgfVxyXG59XHJcbiJdfQ==