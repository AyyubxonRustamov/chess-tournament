"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DBUtilMethods = void 0;
const tslib_1 = require("tslib");
const moment_1 = tslib_1.__importDefault(require("moment"));
class DBUtilMethods {
    static insertParams(data) {
        const fields = [];
        const variables = [];
        const values = [];
        let indx = 1;
        for (const [key, value] of Object.entries(data)) {
            if (typeof value === "bigint" ||
                typeof value === "boolean" ||
                typeof value === "number" ||
                typeof value === "string" ||
                typeof value === "object") {
                fields.push(this.stringToSnake(key));
                variables.push(`$${indx}`);
                values.push(value);
                indx++;
            }
        }
        return {
            fields,
            variables,
            values,
        };
    }
    static updateParams(data) {
        const fields = [];
        const values = [];
        let index = 1;
        for (const [key, value] of Object.entries(data)) {
            if (typeof value === "bigint" ||
                typeof value === "boolean" ||
                typeof value === "number" ||
                typeof value === "string" ||
                typeof value === "object") {
                fields.push(`"${this.stringToSnake(key)}" = $${index}`);
                values.push(value);
                index++;
            }
        }
        return {
            fields,
            values,
            index,
        };
    }
    static prepareValue(val, withQuoteString = true, seen = undefined) {
        // null and undefined are both null for postgres
        if (val == null) {
            return "NULL";
        }
        else if (val instanceof Date) {
            return (0, moment_1.default)().format("DD.MM.YYYY HH:mm:ss");
        }
        else if (Array.isArray(val)) {
            return this.arrayString(val);
        }
        else if (typeof val === "object") {
            return this.prepareObject(val, seen);
        }
        else if (typeof val === "string") {
            return withQuoteString
                ? `'${val.replace(/'/g, "''")}'`
                : val.replace(/'/g, "''");
        }
        return val.toString();
    }
    static stringToSnake(str) {
        let res = "";
        res += str.toLowerCase()[0]; // Birinchi harfi Capital latter bo'lishi mumkin
        for (let i = 1; i < str.length; i++) {
            const currChar = str[i];
            const currCharLowercase = currChar.toLowerCase();
            if (currChar === currCharLowercase) {
                res += currChar;
            }
            else {
                res += `_${currCharLowercase}`;
            }
        }
        return res;
    }
    static stringToCamel(str) {
        return str.toLowerCase().replace(/([-_][a-z])/gi, ($1) => {
            return $1.toUpperCase().replace("-", "").replace("_", "");
        });
    }
    static objToSnake(obj) {
        let res = {};
        for (const key of Object.keys(obj)) {
            res[this.stringToSnake(key)] = obj[key];
        }
        return res;
    }
    static objListToSnake(obj) {
        return obj.map((o) => this.objToSnake(o));
    }
    static objToCamel(obj) {
        if (!obj) {
            return obj;
        }
        const res = {};
        for (const key of Object.keys(obj)) {
            if (Array.isArray(obj[key]) &&
                obj[key].every((item) => typeof item === "object")) {
                res[this.stringToCamel(key)] = obj[key].map((o) => this.objToCamel(o));
            }
            else if (typeof obj[key] == "object" &&
                !(0, moment_1.default)(obj[key], "YYYY-MM-DD").isValid() &&
                !Array.isArray(obj[key])) {
                res[this.stringToCamel(key)] = this.objToCamel(obj[key]);
            }
            else {
                res[this.stringToCamel(key)] = obj[key];
            }
        }
        return res;
    }
    static objListToCamel(obj) {
        if (!Array.isArray(obj))
            return [];
        return obj.map((o) => this.objToCamel(o));
    }
    /* Private Methods */
    static prepareObject(val, withSqlString, seen = []) {
        if (val && typeof val.toPostgres === "function") {
            seen = seen || [];
            if (seen.indexOf(val) !== -1) {
                throw new Error('Circular reference detected while preparing "' + val + '" for query');
            }
            seen.push(val);
            return this.prepareValue(val.toPostgres(this.prepareValue), withSqlString, seen);
        }
        return JSON.stringify(val);
    }
    static arrayString(val) {
        let result = "{";
        for (let i = 0; i < val.length; i++) {
            if (i > 0) {
                result = result + ",";
            }
            if (val[i] === null || typeof val[i] === "undefined") {
                result = result + "NULL";
            }
            else if (Array.isArray(val[i])) {
                result = result + this.arrayString(val[i]);
            }
            else if (val[i] instanceof Buffer) {
                result += "\\\\x" + val[i].toString("hex");
            }
            else {
                result += this.escapeElement(this.prepareValue(val[i]));
            }
        }
        result = result + "}";
        return result;
    }
    static escapeElement(elementRepresentation) {
        const escaped = elementRepresentation
            .replace(/\\/g, "\\\\")
            .replace(/"/g, '\\"');
        return '"' + escaped + '"';
    }
}
exports.DBUtilMethods = DBUtilMethods;
//# sourceMappingURL=data:application/json;base64,